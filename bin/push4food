#!/usr/bin/env node
'use strict';
var pjson = require('../package.json');
var program = require('commander');
var winston = require('winston');

var push4food = require('../lib/push4food.js');

var handleError = function(error) {
    console.error(sprintf('[%s] %s', error.name, error.message));
    process.exit(1);
};

var checkManadatoryParams = function(program) {

    if (!program.order) {
        handleError(new Error('Order JSON file is mandatory (-o)'));
    }
};

var buildConfig = function(program) {
  
    config = new push4food.Config();
    config.buttonPort = program.button;
    config.ledPort = program.led;
    config.countDownSeconds = program.countdown;
    config.orderTemplateFile = program.order;
    config.dryrun = program.dryrun;
    
    return config;
};


program
    .version(pjson.version)
    .option('-b, --button [button]', 'button GPIO port. Default is 23', 23)
    .option('-l, --led [led]', 'led GPIO port. Default is 18', 18)
    .option('-o, --order [order]', 'order file template as JSON')
    .option('-v, --verbose', 'outputs debug info')
    .option('-d, --dryrun', 'dry run mode: order will not be sent')
    .option('-c, --countdown [countdown]', 'countdown length in seconds. Default is 300', 300)
    .parse(process.argv);

// Log level
if (program.verbose) {
    winston.level = 'debug';
}

// Check params
checkManadatoryParams(program);

// Build config object from arguments
var config = buildConfig(program);

// Start
try {
    push4food.start(config);
} catch(error) {
    handleError(error);
}
